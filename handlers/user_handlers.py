from aiogram import Bot
from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery

# –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ—Ç
from aiogram.filters import ChatMemberUpdatedFilter, KICKED
from aiogram.types import ChatMemberUpdated

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
from aiogram.types import FSInputFile

# –§–∏–ª—å—Ç—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
from filters.filters import IsAdmin

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
from keyboards.keyboards import keyboard_start, keyboard_inline

# –†–∞–±–æ—Ç–∞ —Å –ë–î
from config_data.config_db_sqlite import (select_users, add_users, update_users,
                                          select_active_users)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config_data.config import Config, load_config

# –í—ã—Ç—è–≥–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ë–î
config: Config = load_config()
path_sqlite = config.path_sqlite.path_sqlite

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∞–∫—Ü–∏–∏
path_img_sale = config.path_img_sale

# –°–ø–∏—Å–æ–∫ —Å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞.
admin_ids_list: list[int] = config.tg_bot.admin_ids

router = Router()


# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π —é–∑–µ—Ä–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
# class IsAdmin(BaseFilter):
#     def __init__(self, admin_ids: list[int]) -> None:
#         # –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏
#         self.admin_ids = admin_ids
#
#     async def __call__(self, message: Message) -> bool:
#         return message.from_user.id in self.admin_ids


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text='–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –∫—Ä–∞–º–Ω–∏—Ü—å ¬´–ö–æ–ø—ñ–ª–æ—á–∫–∞¬ª - –∑—Ä—É—á–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫.'
             ' –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –í–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ü—ñ–π.',
        reply_markup=keyboard_start
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated):
    results = select_users(path_sqlite, event.from_user.id)
    if results:
        update_users(path_sqlite, False, event.from_user.id)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫–æ–º
@router.message(F.contact)
async def send_tel(message: Message):
    # print(message.contact)
    # print(message.from_user)
    if message.from_user.id == message.contact.user_id:
        results = select_users(path_sqlite, message.from_user.id)
        if results:
            update_users(path_sqlite, True, message.from_user.id)
        else:
            add_users(path_sqlite,
                      message.from_user.id,
                      message.contact.first_name,
                      message.contact.phone_number,
                      True
                      )
        await message.answer(
            text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
            reply_markup=keyboard_inline
        )
    else:
        await message.answer(
            text='–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
            reply_markup=keyboard_start
        )


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∞–∫—Ü–∏–∏
@router.callback_query(F.data == "button_stock_clik")
async def send_random_value(callback: CallbackQuery):
    image_from_pc = FSInputFile(path_img_sale)
    await callback.message.answer_photo(
        image_from_pc,
        caption="–ê–∫—Ü—ñ—è")
    await callback.message.answer(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
                                  reply_markup=keyboard_inline)
    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∫—É–±–∏–∫
@router.callback_query(F.data == "button_dice_clik")
async def send_random_value(callback: CallbackQuery):
    await callback.message.answer_dice(emoji="üé≤")
    await callback.message.answer(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=keyboard_inline)
    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É –±–∞—Å–∫–µ—Ç–±–æ–ª
@router.callback_query(F.data == "button_basketball_clik")
async def send_random_value(callback: CallbackQuery):
    await callback.message.answer_dice(emoji="üèÄ")
    await callback.message.answer(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=keyboard_inline)
    await callback.answer()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –∞–ø–¥–µ–π—Ç –æ—Ç –∞–¥–º–∏–Ω–∞
@router.message(IsAdmin(admin_ids_list), F.text.lower() == 'send')
async def answer_if_admins_update(message: Message):
    bot = Bot(token=config.tg_bot.token,
              parse_mode='HTML')
    results = select_active_users(path_sqlite)
    image_from_pc = FSInputFile(path_img_sale)
    for user in results:
        try:
            await bot.send_photo(user[0], image_from_pc, caption="–ê–∫—Ü—ñ—è")
        except:
            pass
        # await message.send_copy()
        # await message.send_copy(chat_id=message.chat.id)
        # await bot.send_photo(user[0], image_from_pc)
        # await message.answer_photo(
        #     image_from_pc,
        #     caption="–ê–∫—Ü—ñ—è",
        #     use)
    # await message.answer(text='–í—ã –∞–¥–º–∏–Ω')
